{"ast":null,"code":"var _jsxFileName = \"/home/muhibullahkamali/REACT/expense-tracker-app/src/Context/GlobalState.js\";\nimport React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer'; //Now we create initial state\n\nconst initialState = {\n  transactions: [{\n    id: 1,\n    text: 'Flower',\n    amount: -20\n  }, {\n    id: 2,\n    text: 'Salary',\n    amount: 500\n  }, {\n    id: 3,\n    text: 'Book',\n    amount: -10\n  }, {\n    id: 4,\n    text: 'Camera',\n    amount: 150\n  }]\n}; //Now we create a global context\n\nexport const GlobalContext = createContext(initialState); //Now if we want to use this in other components first we need to create \"Provider Component\".\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState); //Now Here we create a action for Delete Transaction\n\n  const deleteTransaction = id => {\n    dispatch({\n      type: 'DELETE_TRANSACTION',\n      payload: id\n    });\n  }; //Now Here we create a action for Add transaction\n\n\n  const addTransaction = transaction => {\n    dispatch({\n      type: 'Add_TRANSACTION',\n      payload: transaction\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      deleteTransaction,\n      addTransaction\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, children); //So first we provide the context then we use it anywhere with \"consumer\" keyword.\n}; //Before we consume it in other child-components we need to create our reducer first","map":{"version":3,"sources":["/home/muhibullahkamali/REACT/expense-tracker-app/src/Context/GlobalState.js"],"names":["React","createContext","useReducer","AppReducer","initialState","transactions","id","text","amount","GlobalContext","GlobalProvider","children","state","dispatch","deleteTransaction","type","payload","addTransaction","transaction"],"mappings":";AAAA,OAAOA,KAAP,IAAiBC,aAAjB,EAAiCC,UAAjC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE,CACV;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,MAAM,EAAE,CAAC;AAAlC,GADU,EAEV;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,MAAM,EAAE;AAAjC,GAFU,EAGV;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,MAAf;AAAuBC,IAAAA,MAAM,EAAE,CAAC;AAAhC,GAHU,EAIV;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,MAAM,EAAE;AAAjC,GAJU;AADG,CAArB,C,CASA;;AAEA,OAAO,MAAMC,aAAa,GAAGR,aAAa,CAACG,YAAD,CAAnC,C,CAEP;;AAEA,OAAO,MAAMM,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC5C,QAAM,CAACC,KAAD,EAASC,QAAT,IAAqBX,UAAU,CAACC,UAAD,EAAcC,YAAd,CAArC,CAD4C,CAG5C;;AACA,QAAMU,iBAAiB,GAAIR,EAAD,IAAQ;AAC9BO,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAE,oBADD;AAELC,MAAAA,OAAO,EAAEV;AAFJ,KAAD,CAAR;AAIH,GALD,CAJ4C,CAW5C;;;AACA,QAAMW,cAAc,GAAIC,WAAD,IAAiB;AACxCL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAE,iBADD;AAELC,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIC,GALD;;AAMA,sBACI,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAI;AAC7Bb,MAAAA,YAAY,EAAGO,KAAK,CAACP,YADQ;AAE7BS,MAAAA,iBAF6B;AAG7BG,MAAAA;AAH6B,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKKN,QALL,CADJ,CAlB4C,CA2B5C;AAEH,CA7BM,C,CA8BP","sourcesContent":["import React , { createContext , useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n//Now we create initial state\n\n\nconst initialState = {\n    transactions: [\n        { id: 1, text: 'Flower', amount: -20 },\n        { id: 2, text: 'Salary', amount: 500 },\n        { id: 3, text: 'Book', amount: -10 },\n        { id: 4, text: 'Camera', amount: 150 }\n    ]\n}\n\n//Now we create a global context\n\nexport const GlobalContext = createContext(initialState);\n\n//Now if we want to use this in other components first we need to create \"Provider Component\".\n\nexport const GlobalProvider = ({ children }) => {\n    const [state , dispatch] = useReducer(AppReducer , initialState);\n\n    //Now Here we create a action for Delete Transaction\n    const deleteTransaction = (id) => {\n        dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload: id\n        });\n    }\n\n    //Now Here we create a action for Add transaction\n    const addTransaction = (transaction) => {\n    dispatch({\n        type: 'Add_TRANSACTION',\n        payload: transaction\n    });\n    }\n    return (\n        <GlobalContext.Provider value = {{\n            transactions : state.transactions,\n            deleteTransaction,\n            addTransaction\n        }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n    //So first we provide the context then we use it anywhere with \"consumer\" keyword.\n\n}\n//Before we consume it in other child-components we need to create our reducer first"]},"metadata":{},"sourceType":"module"}